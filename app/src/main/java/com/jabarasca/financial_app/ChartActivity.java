package com.jabarasca.financial_app;

import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.util.AttributeSet;
import android.util.SparseArray;
import android.util.Xml;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.ViewGroup;
import android.widget.TextView;

import com.jabarasca.financial_app.dao.DatabaseAccess;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.formatter.AxisValueFormatter;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;

public class ChartActivity extends AppCompatActivity {

    public static final String CHART_ACTIVITY_REQUEST = "chartActivity";
    public static final String CURRENT_DATE = "currentDate";
    public static final String CURRENT_YEAR = "currentYear";

    private ChartActivity activity;
    private DatabaseAccess dbAccess;

    /*TODO:
        1- A partir do mes atual, calcular o offset do mes atual com base no mes escolhido
        pelo usuario. Este offset sera usado para dizer o intervalo no eixo X do grafico.
        2- Obter o valor CALENDAR de cada mes. Ja eh conhecido o valor atual e o valor
        que o usuario escolheu. Portanto eh possivel fazer o calculo.
        3- Montar a regra no formatter do grafico.*/

    private AxisValueFormatter formatter = new AxisValueFormatter() {
        /**
         * Formats AxisValue for manual(custom) axis. Result is stored in (output) formattedValue array. Method
         * returns number of chars of formatted value. The formatted value starts at index [formattedValue.length -
         * charsNumber] and ends at index [formattedValue.length-1].
         */
        @Override
        public int formatValueForManualAxis(char[] formattedValue, AxisValue axisValue) {
            if(axisValue.getValue() == 1.0) {
                formattedValue[0] = 'J';
                return formattedValue.length;
            } else {
                formattedValue[0] = 'K';
                return formattedValue.length;
            }

        }

        @Override
        public int formatValueForAutoGeneratedAxis(char[] formattedValue, float value, int autoDecimalDigits) {
            return 0;
        }
    };

    @Override
    protected void onActivityResult (int requestCode, int resultCode, Intent intent) {
        //TODO: Verify default value from the intent.
        int selectedYear = intent.getIntExtra(CalendarActivity.SELECTED_DATE_YEAR, 0);
        configureLineChart(dbAccess.getAnnualReportValues(selectedYear));
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_chart_layout);

        activity = this;
        setActionBarCustomView(R.layout.action_bar_text_layout);
        TextView actionBarTextView = (TextView)findViewById(R.id.actionBarTextView);
        actionBarTextView.setText(getString(R.string.graphic_activ_action_bar_title));

        dbAccess = DatabaseAccess.getDBAcessInstance(getApplicationContext());
        String currentDate = getIntent().getStringExtra(CURRENT_DATE);

        Intent intent = new Intent(activity, CalendarActivity.class);
        intent.putExtra(ChartActivity.CHART_ACTIVITY_REQUEST, true);
        intent.putExtra(ChartActivity.CURRENT_YEAR, Integer.parseInt(currentDate.substring(4)));
        activity.startActivityForResult(intent, CalendarActivity.CALENDAR_ACTIVITY_ID_REQUEST);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.activity_chart_action_bar_items, menu);
        //this.menu = menu;
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if(item.getItemId() == R.id.calendarButton) {
            return true;
        } else {
            return super.onOptionsItemSelected(item);
        }
    }

    private void configureLineChart(SparseArray<Float> annualReportValues) {
        LineChartView lineChart = (LineChartView)findViewById(R.id.lineChartView);

        List<PointValue> values = new ArrayList<PointValue>();
        for(int i = 1; i <= annualReportValues.size(); i++) {
            values.add(new PointValue(i, annualReportValues.get(i)));
        }

        Line line = new Line(values).setColor(Color.BLUE);
        List<Line> lines = new ArrayList<Line>();
        lines.add(line);

        Axis axisX = Axis.generateAxisFromRange(1,annualReportValues.size(),(float)1);
        axisX.setName("MÃªs");
        axisX.setMaxLabelChars(2);
        //axisX.setAutoGenerated(false);
        //axisX.setFormatter(formatter);
        //axisX.setHasLines(true);
        //axisX.setLineColor(Color.DKGRAY);
        axisX.setTextColor(Color.BLACK);

        /*Axis axisY = Axis.generateAxisFromRange(-1000,1000, (float)1);
        axisY.setLineColor(Color.DKGRAY);
        axisY.setTextColor(Color.BLACK);
        axisY.setMaxLabelChars(4);*/

        LineChartData data = new LineChartData();
        data.setAxisXBottom(axisX);
        //data.setAxisYLeft(axisY);
        data.setLines(lines);
        lineChart.setLineChartData(data);
    }

    private void setActionBarCustomView(int layoutId) {
        XmlPullParser parser = getResources().getXml(layoutId);
        while(true) {
            try {
                parser.next();
                if(parser.getEventType() == XmlPullParser.START_TAG) {
                    if(parser.getName().equals("LinearLayout")) {
                        break;
                    }
                }
            }catch (XmlPullParserException xmle) {
                xmle.printStackTrace();
            }catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }

        AttributeSet attrSet = Xml.asAttributeSet(parser);
        ActionBar.LayoutParams layoutParams = new ActionBar.LayoutParams(this, attrSet);

        LayoutInflater inflater = (LayoutInflater)getSystemService(LAYOUT_INFLATER_SERVICE);
        ViewGroup actionBarView = (ViewGroup)inflater.inflate(layoutId, null);

        getSupportActionBar().setCustomView(actionBarView, layoutParams);
    }
}
