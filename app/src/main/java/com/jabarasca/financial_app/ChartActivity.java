package com.jabarasca.financial_app;

import android.animation.Animator;
import android.animation.ObjectAnimator;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Typeface;
import android.os.Bundle;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.util.AttributeSet;
import android.util.SparseArray;
import android.util.Xml;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import com.jabarasca.financial_app.dao.DatabaseAccess;
import com.jabarasca.financial_app.utils.Constant;
import com.jabarasca.financial_app.utils.Utilities;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.formatter.AxisValueFormatter;
import lecho.lib.hellocharts.formatter.LineChartValueFormatter;
import lecho.lib.hellocharts.listener.LineChartOnValueSelectListener;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;

public class ChartActivity extends AppCompatActivity {
    public static final int CHART_ACTIVITY_CODE = 2;
    private final int INVALID_CHART_VALUE = -1;

    private int selectedYear;
    private int chartSelectedMonth = INVALID_CHART_VALUE;
    private int oldChartSelectedMonth;
    private MenuItem detailButton;
    private DatabaseAccess dbAccess;
    private TextView actionBarTextView;
    private AxisValueFormatter axisValueFormatter = new AxisValueFormatter() {
        /**
         * Formats AxisValue for manual(custom) axis. Result is stored in (output) formattedValue array. Method
         * returns number of chars of formatted value. The formatted value starts at index [formattedValue.length -
         * charsNumber] and ends at index [formattedValue.length-1].
         */
        @Override
        public int formatValueForManualAxis(char[] formattedValue, AxisValue axisValue) {
            //Clean the array.
            for(int i = 0; i < formattedValue.length; i++) {
                formattedValue[i] = '\0';
            }
            formattedValue[0] = '0';
            formattedValue[1] = ',';
            formattedValue[2] = '0';
            return formattedValue.length;
        }

        @Override
        public int formatValueForAutoGeneratedAxis(char[] formattedValue, float value, int autoDecimalDigits) {
            return 0;
        }
    };

    private LineChartOnValueSelectListener chartValueSelectListener = new LineChartOnValueSelectListener() {
        @Override
        public void onValueSelected(int lineIndex, int pointIndex, PointValue value) {
            oldChartSelectedMonth = chartSelectedMonth;
            chartSelectedMonth = (int)value.getX() - 1;
            updateActionBar();
        }
        @Override
        public void onValueDeselected() {
            oldChartSelectedMonth = chartSelectedMonth;
            chartSelectedMonth = INVALID_CHART_VALUE;
            updateActionBar();
        }
    };

    private void startActBarTextAnimation(final boolean expand) {
        float startValue = expand ? 18f : 20f;
        float endValue = expand ? 20f : 18f;
        ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(actionBarTextView,
                "textSize", startValue, endValue);
        objectAnimator.setDuration(90);
        objectAnimator.addListener(new Animator.AnimatorListener() {
            @Override
            public void onAnimationStart(Animator animation) {
                actionBarTextView.setLayerType(View.LAYER_TYPE_HARDWARE, null);
            }
            @Override
            public void onAnimationEnd(Animator animation) {
                actionBarTextView.setLayerType(View.LAYER_TYPE_NONE, null);
                if(expand) {
                    detailButton.setVisible(false);
                } else {
                    detailButton.setVisible(true);
                }
            }
            @Override
            public void onAnimationCancel(Animator animation) {}
            @Override
            public void onAnimationRepeat(Animator animation) {}
        });
        objectAnimator.start();
    }

    private void updateActionBar() {
        if(oldChartSelectedMonth == INVALID_CHART_VALUE && chartSelectedMonth != INVALID_CHART_VALUE) {
            startActBarTextAnimation(false);
        } else if(
                    oldChartSelectedMonth != INVALID_CHART_VALUE
                    && chartSelectedMonth == INVALID_CHART_VALUE
                ) {
            detailButton.setVisible(false);
            startActBarTextAnimation(true);
        }
    }

    private LineChartValueFormatter pointValueFormatter = new LineChartValueFormatter() {
        @Override
        public int formatChartValue(char[] formattedValue, PointValue value) {
            //Clean the array.
            for(int i = 0; i < formattedValue.length; i++) {
                formattedValue[i] = '\0';
            }
            String yValue = String.format("%.2f", value.getY());
            String month = Utilities.getActionBarMonthFromDatePickerMonth((int)value.getX() - 1);
            String label = month + " (" + yValue + ")";
            for(int i = 0; i < label.length(); i++) {
                formattedValue[i] = label.charAt(i);
            }

            return formattedValue.length;
        }
    };

    @Override
    protected void onActivityResult (int requestCode, int resultCode, Intent intent) {
        if(resultCode == RESULT_OK) {
            selectedYear = intent.getIntExtra(Constant.KEY_INTENT_YEAR, 0);
            actionBarTextView.setText(
                    String.format(getResources().getString(R.string.chart_activ_action_bar_title),
                            selectedYear)
            );
            configureLineChart(dbAccess.getGraphicAnalysisValues(selectedYear));
        } else {
            finish();
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_chart_layout);

        String actBarCurrentDate = getIntent().getStringExtra(Constant.KEY_INTENT_DATE);
        int currentYear = Integer.parseInt(actBarCurrentDate.substring(4));

        setActionBarCustomView(R.layout.action_bar_text_layout);
        actionBarTextView = (TextView)findViewById(R.id.actionBarTextView);
        actionBarTextView.setText(getResources().getString(R.string.actbardrawtoggle_menu_option_1));
        dbAccess = DatabaseAccess.getDBAccessInstance(getApplicationContext());

        Intent intent = new Intent(this, CalendarActivity.class);
        intent.putExtra(Constant.KEY_INTENT_CHART_REQUEST, true);
        intent.putExtra(Constant.KEY_INTENT_YEAR, currentYear);

        startActivityForResult(intent, CalendarActivity.CALENDAR_ACTIVITY_CODE);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.activity_chart_action_bar_items, menu);
        detailButton = menu.findItem(R.id.detailButton);
        detailButton.setVisible(false);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if(item.getItemId() == R.id.detailButton) {
            String pointDate = Utilities.formatDbDateFromDatePicker(CalendarActivity.DEFAULT_DAY,
                    chartSelectedMonth, selectedYear);
            pointDate = pointDate.substring(0,7);
            String currentDate = Utilities.getNowDbDateWithoutTime();
            currentDate = currentDate.substring(0,7);

            Intent intent = new Intent();
            intent.putExtra(Constant.KEY_INTENT_DAY, CalendarActivity.DEFAULT_DAY);
            intent.putExtra(Constant.KEY_INTENT_MONTH, chartSelectedMonth);
            intent.putExtra(Constant.KEY_INTENT_YEAR, selectedYear);
            intent.putExtra(Constant.KEY_INTENT_COMPARE_DATE, pointDate.equals(currentDate));
            setResult(RESULT_OK, intent);
            finish();
            return true;
        } else if(item.getItemId() == android.R.id.home) {
            setResult(RESULT_CANCELED);
            finish();
            return true;
        } else {
            return super.onOptionsItemSelected(item);
        }
    }

    private void configureLineChart(SparseArray<Float> annualReportValues) {
        List<PointValue> amountValues = new ArrayList<>();
        int numberOfPointsToDraw = 0;

        for(int i = 1; i <= annualReportValues.size(); i++) {
            if(!Float.isNaN(annualReportValues.get(i))) {
                //Elements must be added on month crescent order ie. add(1,), add(2,), add(3,)...
                amountValues.add(new PointValue(i, annualReportValues.get(i)));
                numberOfPointsToDraw++;
            }
        }

        if(numberOfPointsToDraw >= 2) {
            Line amountLine = new Line(amountValues).setColor(getResources().
                    getColor(R.color.chart_line_color));
            amountLine.setHasLines(true);
            amountLine.setHasLabelsOnlyForSelected(true);
            amountLine.setFormatter(pointValueFormatter);
            amountLine.setPointColor(getResources().getColor(R.color.action_bar_color));
            List<Line> lines = new ArrayList<>();
            lines.add(amountLine);

            List<AxisValue> axisValues = new ArrayList<>();
            AxisValue axisValue = new AxisValue(0);
            axisValues.add(axisValue);
            Axis axisY = new Axis(axisValues);
            axisY.setFormatter(axisValueFormatter);
            axisY.setTextColor(Color.BLACK);
            axisY.setHasLines(true);
            axisY.setTypeface(Typeface.defaultFromStyle(Typeface.ITALIC));
            axisY.setTextSize(Axis.DEFAULT_TEXT_SIZE_SP);
            axisY.setLineColor(getResources().getColor(R.color.action_bar_color));
            axisY.setHasSeparationLine(false);

            LineChartData data = new LineChartData();
            data.setAxisYRight(axisY);
            data.setLines(lines);

            LineChartView lineChart = (LineChartView)findViewById(R.id.lineChartView);
            lineChart.setZoomEnabled(false);
            lineChart.setValueSelectionEnabled(true);
            lineChart.setLineChartData(data);
            lineChart.setOnValueTouchListener(chartValueSelectListener);

            Bitmap lineChartBitmap = Bitmap.createBitmap(lineChart.getWidth(), lineChart.getHeight(),
                    Bitmap.Config.ARGB_8888);
            Canvas canvas = new Canvas(lineChartBitmap);
            lineChart.draw(canvas);
        } else {
            AlertDialog.Builder alertDialog = new AlertDialog.Builder(ChartActivity.this);
            alertDialog.setPositiveButton(getResources().getString(R.string.positive_button_message),
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            setResult(RESULT_CANCELED);
                            finish();
                        }
                    });
            alertDialog.setMessage(getString(R.string.chart_not_enough_values));
            alertDialog.setTitle(R.string.actbardrawtoggle_menu_option_1);
            alertDialog.show();
        }
    }

    private void setActionBarCustomView(int layoutId) {
        XmlPullParser parser = getResources().getXml(layoutId);
        while(true) {
            try {
                parser.next();
                if(parser.getEventType() == XmlPullParser.START_TAG) {
                    if(parser.getName().equals("LinearLayout")) {
                        break;
                    }
                }
            }catch (XmlPullParserException xmle) {
                xmle.printStackTrace();
            }catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }

        AttributeSet attrSet = Xml.asAttributeSet(parser);
        ActionBar.LayoutParams layoutParams = new ActionBar.LayoutParams(this, attrSet);

        LayoutInflater inflater = (LayoutInflater)getSystemService(LAYOUT_INFLATER_SERVICE);
        ViewGroup actionBarView = (ViewGroup)inflater.inflate(layoutId, null);

        getSupportActionBar().setCustomView(actionBarView, layoutParams);
    }
}
