package com.jabarasca.financial_app;

import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.util.AttributeSet;
import android.util.SparseArray;
import android.util.Xml;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.ViewGroup;
import android.widget.TextView;

import com.jabarasca.financial_app.dao.DatabaseAccess;
import com.jabarasca.financial_app.utils.Utilities;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import lecho.lib.hellocharts.formatter.AxisValueFormatter;
import lecho.lib.hellocharts.formatter.LineChartValueFormatter;
import lecho.lib.hellocharts.listener.LineChartOnValueSelectListener;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;

public class ChartActivity extends AppCompatActivity {

    public static final String CHART_ACTIVITY_REQUEST = "chartActivity";
    public static final String CHART_ACTIVITY_DB_DATE = "dbDateChartActivity";
    public static final String CURRENT_DATE = "currentDate";
    public static final String CURRENT_YEAR = "currentYear";

    private Menu menu;
    private ChartActivity activity;
    private DatabaseAccess dbAccess;
    private Handler handler = new Handler(Looper.getMainLooper());
    private TextView actionBarTextView;
    private Bitmap lineChartBitmap;
    private AxisValueFormatter axisValueFormatter = new AxisValueFormatter() {
        /**
         * Formats AxisValue for manual(custom) axis. Result is stored in (output) formattedValue array. Method
         * returns number of chars of formatted value. The formatted value starts at index [formattedValue.length -
         * charsNumber] and ends at index [formattedValue.length-1].
         */
        @Override
        public int formatValueForManualAxis(char[] formattedValue, AxisValue axisValue) {
            int axisCalendarValue = (int)axisValue.getValue() - 1;
            String month = Utilities.getCalendarMonthForActionBar(axisCalendarValue);
            formattedValue[0] = month.charAt(0);
            formattedValue[1] = month.charAt(1);
            formattedValue[2] = month.charAt(2);
            return formattedValue.length;
        }

        @Override
        public int formatValueForAutoGeneratedAxis(char[] formattedValue, float value, int autoDecimalDigits) {
            return 0;
        }
    };

    private final float INVALID_CHART_VALUE = (float)-1.0;
    private float chartSelectedValue = INVALID_CHART_VALUE;

    private LineChartOnValueSelectListener chartValueSelectListener = new LineChartOnValueSelectListener() {
        @Override
        public void onValueSelected(int lineIndex, int pointIndex, PointValue value) {
            chartSelectedValue = value.getX();
        }
        @Override
        public void onValueDeselected() {
            chartSelectedValue = INVALID_CHART_VALUE;
        }
    };

    private LineChartValueFormatter lineLabelFormatter = new LineChartValueFormatter() {
        @Override
        public int formatChartValue(char[] formattedValue, PointValue value) {
            int arrayLength = formattedValue.length;
            for(int i = 0; i < arrayLength; i++) {
                if(formattedValue[i] == '\0') {
                    break;
                } else {
                    formattedValue[i] = '\0';
                }
            }
            String yValue = String.format("%.2f", value.getY());
            arrayLength = yValue.length();

            for(int i = 0; i < arrayLength; i++) {
                formattedValue[i] = yValue.charAt(i);
            }
            return formattedValue.length;
        }
    };

    @Override
    protected void onActivityResult (int requestCode, int resultCode, Intent intent) {
        if(resultCode == RESULT_OK) {
            int selectedYear = intent.getIntExtra(CalendarActivity.SELECTED_DATE_YEAR, 0);
            actionBarTextView.setText(
                    String.format(getResources().getString(R.string.chart_activ_action_bar_title),
                            selectedYear)
            );
            configureLineChart(dbAccess.getAnnualReportValues(selectedYear));
        } else {
            finish();
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_chart_layout);

        activity = this;
        String actBarCurrentDate = getIntent().getStringExtra(CURRENT_DATE);
        int currentYear = Integer.parseInt(actBarCurrentDate.substring(4));

        setActionBarCustomView(R.layout.action_bar_text_layout);
        actionBarTextView = (TextView)findViewById(R.id.actionBarTextView);
        actionBarTextView.setText(getResources().getString(R.string.actbardrawtoggle_menu_option_1));
        dbAccess = DatabaseAccess.getDBAcessInstance(getApplicationContext());

        Intent intent = new Intent(activity, CalendarActivity.class);
        intent.putExtra(ChartActivity.CHART_ACTIVITY_REQUEST, true);
        intent.putExtra(ChartActivity.CURRENT_YEAR, currentYear);

        activity.startActivityForResult(intent, CalendarActivity.CALENDAR_ACTIVITY_ID_REQUEST);
    }

//    @Override
//    public boolean onCreateOptionsMenu(Menu menu) {
//        // Inflate the menu; this adds items to the action bar if it is present.
//        getMenuInflater().inflate(R.menu.activity_chart_action_bar_items, menu);
//        return super.onCreateOptionsMenu(menu);
//    }

//    @Override
//    public boolean onOptionsItemSelected(MenuItem item) {
//        if(item.getItemId() == R.id.calendarButton) {
//            return true;
//        } else {
//            return super.onOptionsItemSelected(item);
//        }
//    }

    //TODO: This method needs to be called on onStart(), because when the user add or delete
    //some amount on the MainActivity initiated from ChartActivity and press back button,
    //the chart needs to be updated.
    private void configureLineChart(SparseArray<Float> annualReportValues) {
        List<PointValue> amountValues = new ArrayList<>();
        for(int i = 1; i <= annualReportValues.size(); i++) {
            if(!Float.isNaN(annualReportValues.get(i))) {
                //Elements must be added on month crescent order ie. add(1,), add(2,), add(3,)...
                amountValues.add(new PointValue(i, annualReportValues.get(i)));
            }
        }
        Line amountLine = new Line(amountValues).setColor(getResources().
                getColor(R.color.chart_line_color));
        amountLine.setHasLines(true);
        amountLine.setHasLabelsOnlyForSelected(true);
        amountLine.setFormatter(lineLabelFormatter);
        amountLine.setPointColor(getResources().getColor(R.color.chart_line_point));
        List<Line> lines = new ArrayList<>();
        lines.add(amountLine);

        Axis axisX = Axis.generateAxisFromRange(1,12,(float)1);
        axisX.setMaxLabelChars(1);
        axisX.setFormatter(axisValueFormatter);
        axisX.setTextColor(Color.BLACK);
        axisX.setTextSize(10);

        LineChartData data = new LineChartData();
        data.setAxisXBottom(axisX);
        data.setLines(lines);

        LineChartView lineChart = (LineChartView)findViewById(R.id.lineChartView);
        lineChart.setZoomEnabled(false);
        lineChart.setValueSelectionEnabled(true);
        lineChart.setLineChartData(data);
        lineChart.setOnValueTouchListener(chartValueSelectListener);

        lineChartBitmap = Bitmap.createBitmap(lineChart.getWidth(), lineChart.getHeight(),
                Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(lineChartBitmap);
        lineChart.draw(canvas);
    }

    private void setActionBarCustomView(int layoutId) {
        XmlPullParser parser = getResources().getXml(layoutId);
        while(true) {
            try {
                parser.next();
                if(parser.getEventType() == XmlPullParser.START_TAG) {
                    if(parser.getName().equals("LinearLayout")) {
                        break;
                    }
                }
            }catch (XmlPullParserException xmle) {
                xmle.printStackTrace();
            }catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }

        AttributeSet attrSet = Xml.asAttributeSet(parser);
        ActionBar.LayoutParams layoutParams = new ActionBar.LayoutParams(this, attrSet);

        LayoutInflater inflater = (LayoutInflater)getSystemService(LAYOUT_INFLATER_SERVICE);
        ViewGroup actionBarView = (ViewGroup)inflater.inflate(layoutId, null);

        getSupportActionBar().setCustomView(actionBarView, layoutParams);
    }
}
